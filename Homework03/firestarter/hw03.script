Script started on 2023-12-03 23:54:06-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="233" LINES="11"]
]0;ajm94@remotel1: ~/CS374/Homework03/firestarter[01;32majm94@remotel1[00m:[01;34m~/CS374/Homework03/firestarter[00m$ cat firestarter.c 
/* firestarter.c 
 * David Joiner
 * Usage: Fire [forestSize(20)] [numTrials(5000)] * [numProbabilities(101)] [showGraph(1)]
 * 
 * Alex Miller
 * Calvin University
 * 15 Oct 2023
 * CS 374 HW03
 */
#include <stdio.h>
#include <stdlib.h>
#include "X-graph.h"
#include <mpi.h>
#include "parallelLoopChunks.h"
#include <limits.h>

#define UNBURNT 0
#define SMOLDERING 1
#define BURNING 2
#define BURNT 3

#define true 1
#define false 0

typedef int boolean;

extern void seed_by_time(int);
extern int ** allocate_forest(int);
extern void initialize_forest(int, int **);
extern double get_percent_burned(int, int **);
extern void delete_forest(int, int **);
extern void light_tree(int, int **,int,int);
extern boolean forest_is_burning(int, int **);
extern void forest_burns(int, int **,double);
extern int burn_until_out(int,int **,double,int,int);
extern void print_forest(int, int **);

int main(int argc, char ** argv) {
    // initial conditions and variable definitions
    int forest_size=20;
    double * prob_spread;
    double prob_min=0.0;
    double prob_max=1.0;
    double prob_step;
    int **forest;
    double * percent_burned;
    int i_trial;
    int n_trials=5000;
    int i_prob;
    int n_probs=101;
    int do_display=0; // show the display
    double * iter_count;
    double start_time = 0;
    int numProcesses = 0;
    int id = 0;
    double * total_percent;
    double * total_iter;
    xgraph thegraph;
    const int MASTER = 0;
    unsigned start = -1, stop = -1;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &id);
    MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

    start_time = MPI_Wtime();
    
    // check command line arguments
    if (argc > 1) {
        sscanf(argv[1],"%d",&forest_size);
    }
    if (argc > 2) {
        sscanf(argv[2],"%d",&n_trials);
    }
    if (argc > 3) {
        sscanf(argv[3],"%d",&n_probs);
    }
    if (argc > 4) {
        sscanf(argv[4],"%d",&do_display);
    }
    if (do_display!=0) do_display=1;

    // setup problem
    seed_by_time(0);
    forest=allocate_forest(forest_size);
    prob_spread = (double *) calloc (n_probs,sizeof(double));
    percent_burned = (double *) calloc (n_probs,sizeof(double));
    iter_count = (double *) calloc (n_probs,sizeof(double));
    total_percent = (double *) calloc (n_probs,sizeof(double));
    total_iter = (double *) calloc (n_probs,sizeof(double));

    getChunkStartStopValues(id, numProcesses, n_trials, &start, &stop);

    // for a number of probabilities, calculate
    // average burn and output
    prob_step = (prob_max-prob_min)/(double)(n_probs-1);
    if (id == MASTER) {
        
        printf("Probability of fire spreading | Average percent burned | Number of Iterations\n");
    }

    // set up the initial values of the array
    for (i_prob = 0; i_prob < n_probs; i_prob++) {
        prob_spread[i_prob] = prob_min + (double)i_prob * prob_step;
        // percent_burned[i_prob]=0.0;
        // iter_count[i_prob]=0;
    }

    for (i_trial = start; i_trial < stop; ++i_trial) {
        for (i_prob = 0; i_prob < n_probs; i_prob++) {
            iter_count[i_prob] += burn_until_out(forest_size,forest,prob_spread[i_prob],forest_size/2,forest_size/2);
            percent_burned[i_prob]+=get_percent_burned(forest_size,forest);
            
        }
    }
    
    MPI_Reduce(iter_count, total_iter, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
    MPI_Reduce(percent_burned, total_percent, n_probs, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // do some clean up
    if (id == MASTER) {
        for (i_prob = 0; i_prob < n_probs; i_prob++) {
            total_percent[i_prob]/=n_trials;
            total_iter[i_prob]/=n_trials;
            // iter_count[i_prob]*=numProcesses;
            printf("%lf\t%lf\t%f\n", prob_spread[i_prob], total_percent[i_prob], total_iter[i_prob]);
        }

        printf("\nProcs\tSize\tTime\n%d\t%d\t%f\n", numProcesses, forest_size, MPI_Wtime() - start_time);

        // plot graph
        if (do_display==1) {
            xgraphSetup(&thegraph,300,300);
            xgraphDraw(&thegraph,n_probs,0,0,1,1,prob_spread,total_percent);
            pause();
        }
    }

    MPI_Finalize();

    
    

    // clean up
    delete_forest(forest_size,forest);
    free(prob_spread);
    free(percent_burned);
    free(iter_count);
    free(total_percent);
    free(total_iter);
    return 0;
}

#include <time.h>

void seed_by_time(int offset) {
    time_t the_time;
    time(&the_time);
    srand((int)the_time+offset);
}

int burn_until_out(int forest_size,int ** forest, double prob_spread,
    int start_i, int start_j) {
    int count;

    initialize_forest(forest_size,forest);
    light_tree(forest_size,forest,start_i,start_j);

    // burn until fire is gone
    count = 0;
    while(forest_is_burning(forest_size,forest)) {
        forest_burns(forest_size,forest,prob_spread);
        count++;
    }

    return count;
}

double get_percent_burned(int forest_size,int ** forest) {
    int i,j;
    int total = forest_size*forest_size-1;
    int sum=0;

    // calculate pecrent burned
    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                sum++;
            }
        }
    }

    // return percent burned;
    return ((double)(sum-1)/(double)total);
}


int ** allocate_forest(int forest_size) {
    int i;
    int ** forest;

    forest = (int **) malloc (sizeof(int*)*forest_size);
    for (i=0;i<forest_size;i++) {
        forest[i] = (int *) malloc (sizeof(int)*forest_size);
    }

    return forest;
}

void initialize_forest(int forest_size, int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            forest[i][j]=UNBURNT;
        }
    }
}

void delete_forest(int forest_size, int ** forest) {
    int i;

    for (i=0;i<forest_size;i++) {
        free(forest[i]);
    }
    free(forest);
}

void light_tree(int forest_size, int ** forest, int i, int j) {
    forest[i][j]=SMOLDERING;
}

boolean fire_spreads(double prob_spread) {
    if ((double)rand()/(double)RAND_MAX < prob_spread)
        return true;
    else
        return false;
}

void forest_burns(int forest_size, int **forest,double prob_spread) {
    int i,j;
    extern boolean fire_spreads(double);

    //burning trees burn down, smoldering trees ignite
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) forest[i][j]=BURNT;
            if (forest[i][j]==SMOLDERING) forest[i][j]=BURNING;
        }
    }

    //unburnt trees catch fire
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) {
                if (i!=0) { // North
                    if (fire_spreads(prob_spread)&&forest[i-1][j]==UNBURNT) {
                        forest[i-1][j]=SMOLDERING;
                    }
                }
                if (i!=forest_size-1) { //South
                    if (fire_spreads(prob_spread)&&forest[i+1][j]==UNBURNT) {
                        forest[i+1][j]=SMOLDERING;
                    }
                }
                if (j!=0) { // West
                    if (fire_spreads(prob_spread)&&forest[i][j-1]==UNBURNT) {
                        forest[i][j-1]=SMOLDERING;
                    }
                }
                if (j!=forest_size-1) { // East
                    if (fire_spreads(prob_spread)&&forest[i][j+1]==UNBURNT) {
                        forest[i][j+1]=SMOLDERING;
                    }
                }
            }
        }
    }
}

boolean forest_is_burning(int forest_size, int ** forest) {
    int i,j;

    for (i=0; i<forest_size; i++) {
        for (j=0; j<forest_size; j++) {
            if (forest[i][j]==SMOLDERING||forest[i][j]==BURNING) {
                return true;
            }
        }
    }
    return false;
}

void print_forest(int forest_size,int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                printf(".");
            } else {
                printf("X");
            }
        }
        printf("\n");
    }
}]0;ajm94@remotel1: ~/CS374/Homework03/firestarter[01;32majm94@remotel1[00m:[01;34m~/CS374/Homework03/firestarter[00m$ make
make: 'Fire' is up to date.
]0;ajm94@remotel1: ~/CS374/Homework03/firestarter[01;32majm94@remotel1[00m:[01;34m~/CS374/Homework03/firestarter[00m$ cat SLURM/out/slurm-221907.out 
Probability of fire spreading | Average percent burned | Number of Iterations
0.000000	0.000000	2.000000
0.010000	0.000128	2.051200
0.020000	0.000257	2.102400
0.030000	0.000128	2.051200
0.040000	0.000385	2.102400
0.050000	0.000128	2.051200
0.060000	0.001412	2.512000
0.070000	0.000710	2.232000
0.080000	0.000770	2.307200
0.090000	0.001155	2.307200
0.100000	0.000898	2.358400
0.110000	0.000770	2.307200
0.120000	0.001796	2.563200
0.130000	0.001668	2.614400
0.140000	0.001796	2.614400
0.150000	0.002763	2.948800
0.160000	0.004363	3.228800
0.170000	0.003208	3.177600
0.180000	0.004235	3.228800
0.190000	0.006552	4.000000
0.200000	0.006416	3.740800
0.210000	0.003344	3.129600
0.220000	0.004303	3.153600
0.230000	0.005073	3.460800
0.240000	0.010266	4.969600
0.250000	0.004559	3.358400
0.260000	0.009436	4.331200
0.270000	0.007314	3.792000
0.280000	0.010149	4.596800
0.290000	0.012720	4.692800
0.300000	0.024834	6.123200
0.310000	0.018819	6.358400
0.320000	0.024148	5.590400
0.330000	0.011256	4.696000
0.340000	0.022925	6.563200
0.350000	0.024602	7.000000
0.360000	0.055820	9.731200
0.370000	0.041720	8.352000
0.380000	0.043826	8.478400
0.390000	0.057660	10.102400
0.400000	0.049933	8.608000
0.410000	0.057672	9.755200
0.420000	0.095138	14.078400
0.430000	0.118665	13.569600
0.440000	0.176706	16.809600
0.450000	0.157113	15.054400
0.460000	0.238568	21.462400
0.470000	0.212599	18.761600
0.480000	0.226358	19.868800
0.490000	0.350909	27.048000
0.500000	0.400281	28.524800
0.510000	0.357442	29.726400
0.520000	0.463407	31.681600
0.530000	0.610422	34.563200
0.540000	0.549289	32.076800
0.550000	0.707553	35.100800
0.560000	0.646232	29.440000
0.570000	0.669782	28.371200
0.580000	0.725879	30.822400
0.590000	0.847715	29.689600
0.600000	0.877281	32.590400
0.610000	0.709149	26.756800
0.620000	0.901053	29.376000
0.630000	0.915348	27.249600
0.640000	0.893454	27.720000
0.650000	0.900523	25.894400
0.660000	0.961881	25.740800
0.670000	0.955248	27.379200
0.680000	0.965494	26.539200
0.690000	0.970342	25.587200
0.700000	0.975587	24.126400
0.710000	0.980154	24.084800
0.720000	0.979008	24.337600
0.730000	0.983346	24.457600
0.740000	0.988026	23.849600
0.750000	0.988640	23.536000
0.760000	0.936525	21.208000
0.770000	0.994406	22.665600
0.780000	0.993756	22.870400
0.790000	0.994278	22.512000
0.800000	0.995244	22.358400
0.810000	0.996595	22.358400
0.820000	0.998332	22.512000
0.830000	0.996792	22.307200
0.840000	0.998709	22.204800
0.850000	0.997365	22.256000
0.860000	0.998845	22.153600
0.870000	0.998332	21.948800
0.880000	0.999615	22.153600
0.890000	0.999230	22.000000
0.900000	0.999034	22.000000
0.910000	0.999487	22.000000
0.920000	1.000000	22.000000
0.930000	1.000000	22.000000
0.940000	1.000000	22.000000
0.950000	0.999872	22.000000
0.960000	1.000000	22.000000
0.970000	1.000000	22.000000
0.980000	1.000000	22.000000
0.990000	1.000000	22.000000
1.000000	1.000000	22.000000

Procs	Size	Time
256	20	0.175059
]0;ajm94@remotel1: ~/CS374/Homework03/firestarter[01;32majm94@remotel1[00m:[01;34m~/CS374/Homework03/firestarter[00m$ exit

Script done on 2023-12-03 23:54:42-05:00 [COMMAND_EXIT_CODE="0"]
